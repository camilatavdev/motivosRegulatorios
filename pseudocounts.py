#Encontrar Motivos regulatÃ³rios ambiciosos com PseudoCounts

def GreedyMotifSearchWithPseudocounts(Dna, k, t):
    def ProfileWithPseudocounts(Motifs):
        count = CountWithPseudocounts(Motifs)
        profile = {}
        for symbol in "ACGT":
            profile[symbol] = [float(count[symbol][j]) / (t + 4) for j in range(k)]
        return profile

    def CountWithPseudocounts(Motifs):
        count = {}
        for symbol in "ACGT":
            count[symbol] = [1] * k
        for motif in Motifs:
            for j in range(k):
                symbol = motif[j]
                count[symbol][j] += 1
        return count

    def Score(Motifs):
        consensus = Consensus(Motifs)
        score = 0
        for i, motif in enumerate(Motifs):
            for j in range(k):
                if motif[j] != consensus[j]:
                    score += 1
        return score

    def Consensus(Motifs):
        count = CountWithPseudocounts(Motifs)
        consensus = ""
        for j in range(k):
            max_count = 0
            frequent_symbol = ""
            for symbol in "ACGT":
                if count[symbol][j] > max_count:
                    max_count = count[symbol][j]
                    frequent_symbol = symbol
            consensus += frequent_symbol
        return consensus

    BestMotifs = [string[:k] for string in Dna]

    for i in range(len(Dna[0]) - k + 1):
        Motifs = [Dna[0][i : i + k]]
        for j in range(1, t):
            profile = ProfileWithPseudocounts(Motifs)
            Motifs.append(ProfileMostProbableKmer(Dna[j], k, profile))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs

    return BestMotifs


def ProfileMostProbableKmer(text, k, profile):
    max_prob = -1
    most_probable = text[:k]
    for i in range(len(text) - k + 1):
        kmer = text[i : i + k]
        prob = 1
        for j in range(k):
            prob *= profile[kmer[j]][j]
        if prob > max_prob:
            max_prob = prob
            most_probable = kmer
    return most_probable


# Running the GreedyMotifSearchWithPseudocounts function
k = 12
t = 25
Dna = [
    "ATCGTTTGTCATCTCGGCAAGGACGGACTTAAGTTTGACGTCGGATGCCCCCTTGAGATCTGCCAATTCTAAATTTCCATGAGAATTAGGGTTCTGACGACTGGGCGCTCGTGCCCAATGCGATTCGGGCTTGGTAGTACATTTGCACCTCGAGTC",
"GGGGTCTTTATGGCTTGCCGTCTTACAACATTGGTGGCATAGCATCACCAGACGATGAAAATGAGACTGTGAGGAGCACCGTTCCCTGCTAACGAGCTTAGCAAGTACACGTGAAGTTGATAAAAACGGCCCGTGTCCTACCCTCATTGATGGCCG",
"GTCGACGACCCCAAATGCACACTAACATCCGTGGGGCTGGGCTAGGACGCACATTAAGAGATCCCATCAGAACCTTCGCCAACGTTAACCGACCCACGGGCGATGTAAACAGGTCGTTACTCTAGGTCCCTACATTGAAAAATCTCAAGTTACAGC",
"TCGCAGTGTGTGGTGGAGTAACTGCTATGCGAGCACGTCGTATGAGCATATAGCGAGGAGATGTCGCAGTGGCTTTGCTGCCATAGGCTCCACAGTCCGGTGCGAAAGCTGGGTGAAAGGCAAGTAGCAGCTGTGAAACTTGTTACGGAGTTTCCT",
"TTGTTTGTGGGGGTAACCAAATTTCAGTGGACGGTACGAACTCTCCTACTCAGCTAGGACAACTCGAGGACTCCAAGACTTGTACTAACATTCCTAACCCGTGCATCGCGGCCAGGAGCAGAAAAGGAGCGCTGTGCGCGATTGCGGGGGTTCACT",
"CTGTTGCTCTTTTCTAGAAATGTATTAGGTCACTCGGTACGAGAATAATTATAATGCCAAGTCTGAGGGCTACTCTGCGAGCACTGGGTACAAACCGATTTAGCCCCCGGACGCGCTCAACACGAATGAGCATCTAAACAAGTCTTTGCATGGAAA",
"GCTACAACCAACTACTGGGGTGTCTGTGAGAGGACGTTTGTTCATCTTTCACTGCGTGTACAGGAGAACACCACGGGGTGTCGAGAAAGGTGTGAACAGTAGATCTGTACCGCTGGGACCCACTTGTCAATGCTGTGCCAGAACGAATACTAAGAC",
"GCTGGACAAAGCCCCCGACAATTGGCAGGTGGTCGTCTTTGCTAGCACATGAAGATAGGGATGTGAGATACTACGAAAGGACCTACTCATGAGACTGAACCTAGTTCAGATCTGTGGCCCTGCCTCTGAATATAAGCTCTCTATTCGAAAGAGCCT",
"TGCTCCAAGGCACGACGATCGATGATGACGTTAGGTATGGAGGTACGTTCGACATGTATGACGACATTACAGAGTTATGTTGCACTCCGCGAGAACCACTTATTGCCCATAGTTGCGCCGAGTCGGGTAAGTTGGCCACGAATTCTGTAAAAGCCT",
"GGCACCCCTAAAGAGTACGGCTCTTCACTGAGACAGCATATTCATAGATTGCGGTCGTCAGCATACATCCTGGTCATTGTACGTACCAGGAGGGTACTTGGCGAGCACTCGATTGGACCCCGAATGCTCACCTATCAACCATGTTCCAGTAGAGGT",
"GCAGGACTCATGCTACGCTAGAACAATATGCGTTGATTGCCTTGCAATAGGGGGAATTAGCAGGCGTCAGCTACGTCTACAAGGACCCACGATTACCCTATCCGTACCGACTTCGAACGGGTCCGACCCGACTAATCGCTACTCTGACTTGCAGGA",
"TGAATAAAGTATATATTGATGTTGCGACCCCGTCGAGACGTGCAACCCTGTTCCCCCGGCCTTTGCAAGTACGGCCTTCTTCACGGTTGGCGCTAGGAGTCTGAGATGGTACAGATTCCCTCCGTAGCGAGTTACTCCTACAGGCTTGCTATTTGT",
"CCAGAAGCCTCTTTATTCAGAGATGTTCCCGTTGCGCAATTAGGTCACGGCTCCGATCCCGAGGTCGGCCAGTGCTAACGCAGCTTTAGCGATGTCCTGGGCAAGGACGCCAGCATCGTTAACGAAGAGCAACGCGTCAAATATCAATGCTTTACA",
"CCCCATGGCTCACTAAGCCAGTACATGTGTCCCGCCGCGGCCACATGAAGAATCGCTAATATCCGAGACTATTGTCAACATACACAGGCGCACAATCGCCGGAATTGCATGAAAGGCCAACGCCAATAGTAGCTGGATGCGCTGGGTTATTATGTA",
"TTGTAATAAAGGCATCAGCGGCTCACAAGGGTTAGATGACATTAAGGTCAATGATCGTGTGACGGATGAGTGAAGACAGCCCTTCTAGGCCAGAACGCGACCCCCGACGCAGACGTTACACAGAAAGTAAAATAGAAGAAGCTTTATCCGACTATC",
"ACTTTGTAATTGGTACTCCCTGACGCTGAGGACAACTCTCCTTACATGTTGCCCCGGCGGACACCACTGCGCACAGGGAGCCGAGTCGGGGATTGCGCACAAAGCAGGCTGGGCAAGAACAACCATCGATACTCGGTCAAACGGAACAACCGTTTA",
"TTCTTTATGCCAATGTCTGGACATCCGTTACTTAGATATGTATGCCGGTTTGTAAACAATGAGCACGACAACTAACGTCGGACGTGTATTGTGGCTACAGAGAAATGAAATGCCTAATTACGGATATAAGGAAATGTTATTTCGCTCGGCGAGGAC",
"TCGAGTGTAAGTCTACGCAAGTACCTTATGAAGGGGTGGGTAAAACCGTATCAAGTTTGGCAAAGAGTGCGACCAGTCTTAAGACACATCACGATACGACTCCCCTCCATGTAATGTATTCGATTATGCAGATGGGGCGGGACATTAGTACGCATT",
"CGCCTATAGATAACCCTCGCGACCCGGGTTACAGTGCTGCATCCTTTTGGTAGCTCGCCCTTCTCTAAAAATTCGTTATTTGATGACCCTTTATCGCTGAGCGAGTACATTTTAAAATAGAAGCGGGTGACTGGTTAGCCATCGTTTTAGCAGTTA",
"CTTGGCAAGAACCGTCGGTACAATGAGACGTATTAATTCTCGTCGTCTCTCAGTCCGACAGTTAATGAGTGGCCTAAATGAAATGTACGTCATGGTTGGCCGGATTCTAGCCCCCACCAACATGACGTACGAAAGTACGATGGCCCGACATTCGGA",
"GAACCCTTCGTGTTAGCAGAAACAGAATGTTAGCCTCACCCAGGGTGCCCCATTTTTCTAGAACGTTCACATCCACTAATTGAGCAACACGGCTACTGCTTATTAGCCCTTTGCAAGGACTCTTTCCTAACAATCAGGACATAACTTAACTCCTGA",
"GAACATCCACGGACGATGACTCACCCTGCAAAGAACTCTGGTCCGGATAATTGAGTCAGTGTGCCTCTTGATACCCTGGCATTACTACGCGAGCACCCTGGAAGTGGCCAGAATTGAGCGTGGGCCAACACTGACTCTGCCTCAAGTGAATTTGAT",
"TGACCACCGGGGAAGAGGGCGTTTGTTGCTGTTTAGATGTCCACTAAGCGATGACCCCCGTTGAACCCGTCGTTCGATCCTTCTTAGATCAAACCAGATCTTACGTTGGACTAAGGGGTCGGGAATCGCGCAGCAAGATCATTACTCTGCCAGAAC",
"ATTACTTCAACGCCTAACTGCCGTTAAGAGTGAATTCAGTATGACGAGGAAACTCGCGACTCAGTCAATGGCAGGAGCATTGAGGGCGAACTCACACTTCGCTAGCACCATTCCGCCTGCAGAGCTTCGGATATCTAGGTCATCTTCCAGATCGCG",
"TTTTAAAGAAGACGCTAAACGGGTCCTATCAGATATAGCTGCTTGATACCACGCCCTTGCCCTTCGTGCACTTCGGGGACCCAAGCCTGATAAACCGCAAGATACCGAGACCACCCTGCACTTACCCAGCACCTCGGCGAGCACGATATAAGGCAT"
]
best_motifs = GreedyMotifSearchWithPseudocounts(Dna, k, t)
print(" ".join(best_motifs))